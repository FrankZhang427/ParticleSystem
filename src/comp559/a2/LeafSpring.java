// NAME: Zhiguo(Frank) Zhang
// ID: 260550226
package comp559.a2;

import javax.vecmath.Vector2d;

/**
 * Leaf Spring class for COMP 599 assignment 2
 * (do not distribute)
 * @author kry
 */
public class LeafSpring {

    Particle p0 = null;
    Particle p1 = null;
    Particle p2 = null;    
    
    /**
     * All springs share the same stiffness coefficient
     */
    static double k = 1;
    /**
     * All springs share the same camping coefficient
     */
    static double b = 1;
    
    /**
     * Rest angle
     */
    double rest = 0;
    
    /**
     * Creates a spring connecting two particles.
     * The rest length should be set
     * @param p0
     * @param p1
     * @param p2
     */
    public LeafSpring( Particle p0, Particle p1, Particle p2 ) {
        this.p0 = p0;
        this.p1 = p1;
        this.p2 = p2;
        computeRest();
    }
    
    /**
     * Computes the rest length of the connected particles
     */
    public void computeRest() {
        Vector2d tmp1 = new Vector2d();
        Vector2d tmp2 = new Vector2d();
        tmp1.sub(p1.p,p0.p);
        tmp2.sub(p2.p,p1.p);
        tmp1.normalize();
        tmp2.normalize();
        double cosrest = tmp1.dot(tmp2);
        if ( cosrest > 1 ) {
            rest = 0;
        } else if ( cosrest < -1 ) {
            rest = Math.PI;
        } else {
            rest = Math.acos( cosrest );
            if ( rest < 1e-2 ) {
                rest = 0;
            }
        }
    }
    
    /**
     * Applies leaf spring forces to the three particles
     * (generated by Maple)
     */
    public void apply() {        
        double P0x = p0.p.x;
        double P0y = p0.p.y;
        double P1x = p1.p.x;
        double P1y = p1.p.y;
        double P2x = p2.p.x;
        double P2y = p2.p.y;        
        if ( rest != 0 ) {
            double t1 = P2x * P1x;
            double t2 = P1x * P1x;
            double t4 = P1x * P0x;
            double t5 = P2y * P1y;
            double t6 = P1y * P1y;
            double t8 = P1y * P0y;
            double t9 = t1 - t2 - P0x * P2x + t4 + t5 - t6 - P0y * P2y + t8;
            double t11 = P0x * P0x;
            double t13 = P0y * P0y;
            double t14 = t2 - 2 * t4 + t11 + t6 - 2 * t8 + t13;
            double t15 = Math.sqrt(t14);
            double t16 = 0.1e1 / t15;
            double t17 = t16 * t9;
            double t18 = P2x * P2x;
            double t20 = P2y * P2y;
            double t22 = t18 - 2 * t1 + t2 + t20 - 2 * t5 + t6;
            double t23 = Math.sqrt(t22);
            double t24 = 0.1e1 / t23;
            double tmp = t24 * t17;
            if ( tmp > 1 ) tmp = 1;
            if ( tmp < -1) tmp = -1;
            double t26 = Math.acos( tmp );
            double t28 = Math.sin(-t26 + rest);
            double t29 = t28 * k;
            double t30 = -P2x + P1x;
            double t35 = 0.1e1 / t15 / t14 * t9;
            double t36 = -P1x + P0x;
            double t41 = t9 * t9;
            tmp = 1 - 1 / t22 / t14 * t41;
            if ( tmp < 0 ) tmp = 0;
            double t47 = Math.sqrt(tmp);            
            double t48 = 0.1e1 / t47;
            if ( Math.abs(t47) <= 1e-10 ) t48 = 0;
            double t52 = -P2y + P1y;
            double t55 = -P1y + P0y;
            double t71 = 0.1e1 / t23 / t22;
            p0.f.x -= t48 * (t24 * t16 * t30 - t36 * t24 * t35) * t29 / 4;
            p0.f.y -= t48 * (t24 * t16 * t52 - t55 * t24 * t35) * t29 / 4;
            p1.f.x -= t48 * (t24 * t16 * (P2x - 2 * P1x + P0x) + t36 * t24 * t35 - t30 * t71 * t17) * t29 / 4;
            p1.f.y -= t48 * (t24 * t16 * (P2y - 2 * P1y + P0y) + t55 * t24 * t35 - t52 * t71 * t17) * t29 / 4;
            p2.f.x -= t48 * (-t24 * t16 * t36 + t30 * t71 * t17) * t29 / 4;
            p2.f.y -= t48 * (-t24 * t16 * t55 + t52 * t71 * t17) * t29 / 4;
        } else {
            double t1 = P1x * P1x;
            double t4 = P0x * P0x;
            double t5 = P1y * P1y;
            double t8 = P0y * P0y;
            double t9 = t1 - 2 * P1x * P0x + t4 + t5 - 2 * P1y * P0y + t8;
            double t10 = Math.sqrt(t9);
            double t11 = 0.1e1 / t10;
            double t12 = t11 * k;
            double t13 = P2x * P2x;
            double t16 = P2y * P2y;
            double t19 = t13 - 2 * P2x * P1x + t1 + t16 - 2 * P2y * P1y + t5;
            double t20 = Math.sqrt(t19);
            double t21 = -P1x + P0x;
            double t25 = k * P2x;
            double t26 = k * P1x;
            double t29 = 0.1e1 / t20;
            double t32 = t10 * k;
            double t36 = k * P0x;
            double t39 = k * P2y;
            double t42 = k * P0y;
            double t44 = k * P1y;
            double t46 = t20 * t32 - P1x * t25 + t1 * k + P2x * t36 - P0x * t26 - P1y * t39 + t5 * k + P2y * t42 - P0y * t44;
            double t49 = 0.1e1 / t10 / t9 * t46;
            double t54 = -P1y + P0y;
            double t69 = -P2x + P1x;
            double t81 = t11 * t46;
            double t83 = 0.1e1 / t20 / t19;
            double t91 = -P2y + P1y;
            p0.f.x -= t29 * t11 * (t21 * t20 * t12 + t25 - t26) / 4 - t21 * t29 * t49 / 4;
            p0.f.y -= t29 * t11 * (t54 * t20 * t12 + t39 - t44) / 4 - t54 * t29 * t49 / 4;
            p1.f.x -= t29 * t11 * (-t21 * t20 * t12 + t69 * t29 * t32 - t25 + 2 * t26 - t36) / 4 + t21 * t29 * t49 / 4 - t69 * t83 * t81 / 4;
            p1.f.y -= t29 * t11 * (-t54 * t20 * t12 + t91 * t29 * t32 - t39 + 2 * t44 - t42) / 4 + t54 * t29 * t49 / 4 - t91 * t83 * t81 / 4;
            p2.f.x -= t29 * t11 * (-t69 * t29 * t32 - t26 + t36) / 4 + t69 * t83 * t81 / 4;
            p2.f.y -= t29 * t11 * (-t91 * t29 * t32 - t44 + t42) / 4 + t91 * t83 * t81 / 4;
        } 
    }    
}
